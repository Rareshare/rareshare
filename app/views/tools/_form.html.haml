- content_for :head do
  - current_user.facilities.build
  :javascript
    $(function() {
      window.tool = new Tool(#{@tool.to_json_for_build});
      window.facilities = new FacilityCollection(#{current_user.facilities.to_json}, '#{@tool.facility_id}');
      window.delivery_facilities = new FacilityCollection(#{current_user.facilities.to_json}, '#{@tool.sample_delivery_address_id}');
      ko.applyBindings({ tool: tool }, $("form.new_tool, form.edit_tool")[0]);
    });

= simple_form_for @tool, html: { data: { bind: "with: tool" } } do |f|
  = f.error_notification

  - f.object.errors.full_messages.each do |e|
    %ul
      %li.error= e

  %div.form-inputs
    %fieldset
      %div.row
        %div.span2
          %p.help-block Please describe the instrument you'd like to share.
        %div.span10
          %legend Basic Information
          %div.row
            %div.span8
              = f.input :tool_category_name, required: true, wrapper: :append do
                = f.input_field :tool_category_name, autocomplete: "off", data: { provide: "typeahead", bind: "typeahead: tool_category_name", lookup: typeahead_path(:tool_category) }
                %button.btn
                  %i.icon-angle-down

          %div.row
            %div.span3
              = f.input :manufacturer_name, required: true, wrapper: :append do
                = f.input_field :manufacturer_name, autocomplete: "off", data: { provide: "typeahead", bind: "typeahead: manufacturer_name", lookup: typeahead_path(:manufacturer) }
                %button.btn
                  %i.icon-angle-down

            %div.span3
              = f.input :model_name, required: true, input_html: { autocomplete: "off", data: { bind: "typeahead: model_name", lookup: typeahead_path(:model) } }

            %div.span2
              = f.input :year_manufactured, as: :select, collection: @tool.possible_years, prompt: "Unknown", include_blank: true
          %br
          %div.row
            %div.span6
              = label_tag :enter_keywords
              = text_field_tag :enter_keyword, nil, class: 'dynamic-text-field', placeholder: "Type a keyword and hit enter"
              .dynamic-save-button.btn{ data: { bind: "click: saveKeyword" } } Save
              = f.input :keywords, as: :hidden, input_html: { data: { bind: "value: keywords().join(', ')" } }

          %ul.xable-tags{ data: { bind: "foreach: keywords()" } }
            %li
              .btn
                %span.remove{ data: { bind: "click: $parent.removeKeyword.bind($data)" } } x
                %span.edit{ data: { bind: "text: $data, click: $parent.editKeyword.bind($data)" } }

          %br
          %div.row
            %div.span8
              = f.input :description

    = f.simple_fields_for :documents_attributes, index: nil do |i|
      %fieldset
        %div.row
          %div.span2
            %p.help-block If you have specifications or marketing materials for the tool, please upload them.
          %div.span8
            %legend
              %i.icon-file
              Specifications
            %ul.unstyled#documents{data: { bind: "foreach: documents" }}
              %li{ data: { bind: "visible: _delete == 0"}}
                %i.icon-trash{ data: { bind: "click: window.tool.removeDocument.bind($data)" } }
                %i.icon-file-alt
                %a{data: { bind: "text: name, attr: { href: url }" }, target: "_blank"}
                = i.hidden_field :id,       data: { bind: "value: id" }
                = i.hidden_field :file_id,  data: { bind: "value: file_id" }
                = i.hidden_field :position, data: { bind: "value: $index" }
                = i.hidden_field :_destroy, class: "deleted", data: { bind: "value: $data._delete" }
                = i.hidden_field :category, value: FileAttachment::Categories::DOCUMENT
            %span.upload
              %a.btn.btn-success.add-file{data: { bind: "click: addFile" }}
                %i.icon-upload
                Upload document
              %input#document-upload.hide{type: "file", name: "uploads[file]", data: { bind: "fileupload: updateDocumentList", url: files_path }}


    %fieldset
      %div.row
        %div.span2
          %p.help-block What condition is the tool in?

        %div.span10
          %legend Condition
          %div.row
            %div.span4= f.input :condition, collection: Tool::Condition::COLLECTION

          %div.row
            %div.span8= f.input :condition_notes

          %div.row
            %div.span3= f.input :calibrated, label: false, inline_label: "Tool must be calibrated", input_html: { data: { bind: "checked: calibrated" } }

            %div.span3{data: { bind: "visible: calibrated" } }
              = f.input :last_calibrated_at, wrapper: :append do
                = f.input_field :last_calibrated_at, class: "date", as: :string, data: { max: Date.today, bind: "value: last_calibrated_at" }
                %span.add-on
                  %i.icon-calendar

    -#%fieldset
    -#  %div.row
    -#    %div.span2
    -#      %p.help-block If applicable, indicate the sample size and resolution of the tool.
    -#
    -#    %div.span10
    -#      %legend Technical Details
    -#      %div.row
    -#        %div.span10= f.input :has_resolution, label: false, inline_label: "Tool used for measurement", input_html: { data: { bind: "checked: has_resolution" } }
    -#      %div.row
    -#        %div.span5= f.input :resolution, input_html: { min: 0, type: "number", step: "any", data: { bind: "enable: has_resolution" } }
    -#        %div.span3= f.input :resolution_unit_id, as: :select, collection: Unit.all, value_method: :id, label_method: :name, input_html: { data: { bind: "enable: has_resolution" } }
    -#
    -#      %div.row
    -#        %div.span5
    -#          %div.control-group.optional.tool_sample_size
    -#            %label.optional.control-label{for: "tool_sample_size"} Sample size
    -#
    -#            %div.controls
    -#              = f.hidden_field :sample_size_min, data: { bind: "value: sampleSize.min" }
    -#              = f.hidden_field :sample_size_max, data: { bind: "value: sampleSize.max" }
    -#              %div.slider-input{data: { bind: "slider: sampleSize" }}
    -#              %p.help-block{style: "margin-top: 10px"}
    -#                %span.exponent
    -#                  10
    -#                  %sup{data: { bind: "text: sampleSize.min"} }
    -#                  %span.unit{data: { bind: "text: sampleSize.unitName" } }
    -#                \ -
    -#                %span.exponent
    -#                  10
    -#                  %sup{data: { bind: "text: sampleSize.max"} }
    -#                  %span.unit{data: { bind: "text: sampleSize.unitName" } }
    -#
    -#
    -#        %div.span3
    -#          = f.input :sample_size_unit_id, as: :select, collection: Unit.all, value_method: :id, label_method: :name, wrapper_html: { class: "tool_sample_size_unit" }, input_html: { data: { bind: "value: sampleSize.unit" } }


    %fieldset

      %div.row
        %div.span2
          %p.help-block= t 'pricing.help'
        %div.span8{class: ("control-group error" if @tool.errors.include?(:pricing))}
          %legend Pricing
          %div.row
            %div.span8
              - Tool::PriceType::COLLECTION.each do |price_type|
                %label.radio
                  = f.radio_button :price_type, price_type[1], data: { bind: "checked: price_type" }
                  = price_type[0]

              -#= f.input :price_type, as: :radio_buttons, collection: Tool::PriceType::COLLECTION

              %label.radio
                = f.radio_button :currency, "GBP", data: { bind: "checked: currency" }
                in GBP (Â£)
              %label.radio
                = f.radio_button :currency, "USD", data: { bind: "checked: currency" }
                in USD ($)

          = f.simple_fields_for :per_time_tool_price_attributes do |p|
            %table.table{data: { bind: "with: perTimeToolPrice, visible: tool.price_type() == 'time'" } }
              %thead
                %tr
                  %th
                    Time unit
                    %small Day or Hour
                  %th{style: "min-width: 200px"}
                    Price

                    %small
                      Per
                      %span{ data: { bind: "text: time_unit" } }
                      \/ One-time setup
                  %th{style: "min-width: 200px"}
                    Lead time
                    %small Days / Days to expedite

              %tbody
                %tr
                  %td
                    - PerTimeToolPrice::TimeUnit::COLLECTION.each do |time_unit|
                      %label.radio.inline
                        = p.radio_button :time_unit, time_unit[1], data: { bind: "checked: time_unit" }
                        = time_unit[0]

                  %td
                    = p.input_field :amount_per_time_unit, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: amount_per_time_unit" }
                    %div.pull-left{style: "line-height: 25px; width: 20px; text-align: center"} /
                    = p.input_field :setup_amount, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: setup_amount" }
                  %td
                    = p.input_field :lead_time_days, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: lead_time_days" }
                    %div.pull-left{style: "line-height: 25px; width: 20px; text-align: center"} /
                    = p.input_field :expedite_time_days, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: expedite_time_days" }

          = f.simple_fields_for :per_sample_tool_prices_attributes, index: nil do |p|
            %table.table{data: { bind: "with: perSampleToolPriceCollection, visible: tool.price_type() == 'sample'" }}
              %thead
                %tr
                  %th
                    Sample type
                    %small Standard of work
                  %th{style: "min-width: 200px"}
                    Price
                    %small Each sample / One-time setup
                  %th{style: "min-width: 200px"}
                    Lead time
                    %small Days / Days to expedite
                  %th
                    %a.has-tooltip.add-price{title: "Add standard of work", data: { bind: "click: appendPrice, btnEnable: canAddPrice" }}
                      %i.icon-plus

              %tbody{data: { bind: "foreach: toolPrices" }}
                %tr
                  %td
                    = p.input_field :subtype, as: :select, collection: PerSampleToolPrice::Subtype::COLLECTION, data: { bind: "value: subtype, options: selectablePriceTypes, optionsValue: 'id', optionsText: 'label'" }
                  %td
                    = p.input_field :base_amount, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: base_amount" }
                    %div.pull-left{style: "line-height: 25px; width: 20px; text-align: center"} /
                    = p.input_field :setup_amount, type: "number", min: "0", style: "width: 60px; float: left", data: { bind: "value: setup_amount" }
                  %td
                    = p.input_field :lead_time_days, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: lead_time_days" }
                    %div.pull-left{style: "line-height: 25px; width: 20px; text-align: center"} /
                    = p.input_field :expedite_time_days, type: "number", min: "1", style: "width: 60px; float: left", data: { bind: "value: expedite_time_days" }
                  %td
                    = p.input_field :id, type: "hidden", data: { bind: "value: id" }
                    %a.rm-price{title: "Remove price", style: "line-height: 30px;", data: { bind: "click: $parent.removePrice($data)" }}
                      %i.icon-trash

    %fieldset
      %div.row
        %div.span2.sidebar
          %p.help-block
            -#We keep this information hidden from users until they've confirmed a reservation with you.

        %div.span8
          = link_to glyph_text(:building, "Manage facilities"), facilities_path, target: "_blank", class: "btn btn-info"
          %br
          %br
          %legend
            %i.icon-map-marker.icon-large
            Physical location
          %div.row
            %div.span8
              = f.association :facility, collection: current_user.facilities, value_method: :id, label_method: :title, include_blank: false
          %div.row
            %div.span8
              = f.input :access_type, collection: Tool::AccessType::COLLECTION, label: "Physical access to tool", input_html: { data: { bind: "value: access_type" } }
              %div{data: { bind: "visible: requiresAccessNotes" }}
                = f.input :access_type_notes, label: "What kind of access is allowed?"
      %div.row
        %div.span2
          %p.help-block
        %div.span8
          %legend
            %i.icon-map-marker.icon-large
              Sample delivery address
          %div.row
            %div.span8
              = f.association :sample_delivery_address, collection: current_user.facilities, value_method: :id, label_method: :title, include_blank: false

      %fieldset
        %div.row
          %div.span2
            %p.help-block Optionally, you may choose to upload your own terms of service for the tools you own.
          %div.span8
            %legend Terms of Service

            %div.row
              %div.span8
                = f.input :terms_document_id, as: :select, collection: [], input_html: { "data-bind" => "value: terms_document_id, options: possible_terms_documents, optionsValue: 'id', optionsText: 'title', optionsCaption: 'Use RareShare terms (default)'" }

                %span.fileupload
                  %a.btn.btn-success{data: { bind: "click: promptFileUpload" }}
                    %i.icon-upload
                    Upload new terms document
                  %input#terms-upload.hide{type: "file", name: "terms_document[pdf]", data: { bind: "fileupload: updateTermsDocuments", url: terms_documents_path }}


      = f.simple_fields_for :images_attributes, index: nil do |i|
        %fieldset
          %div.row
            %div.span2
              %p.help-block Add a picture or two.
            %div.span8
              %legend
                %i.icon-picture.icon-large
                Images
              %p Drag & drop to reorder.
              %ul.unstyled.file-list{data: { bind: "sortable: images" }}
                %li
                  %a.destroy{data: { bind: "click: $parent.removeFile" } }
                    %i.icon-remove-sign
                  %img{data: { bind: "attr: { src: thumbnail }" }}
                  = i.hidden_field :id,       data: { bind: "value: id" }
                  = i.hidden_field :file_id,  data: { bind: "value: file_id" }
                  = i.hidden_field :position, data: { bind: "value: $index" }
                  = i.hidden_field :_destroy, class: "destroyed", data: { bind: "value: $data._destroy" }
                  = i.hidden_field :category, value: FileAttachment::Categories::IMAGE
              %ul.unstyled.file-list
                %li
                  %a.add-file{alt: "Upload image", data: { bind: "click: addFile" }}
                    %i.icon-plus-sign
                  %input#image-upload.hide{type: "file", name: "uploads[file]", data: { bind: "fileupload: updateImageThumbs", url: files_path }}


  %div.row
    %span.offset2.span8
      -#= f.button :submit, class: "btn btn-primary"
      - if @tool.new_record?
        = f.button :submit, t('tools.action_type.create_sandbox'), class: "btn btn-primary"
        = f.button :submit, t('tools.action_type.create_live'), class: "btn btn-success"
      - else
        = f.button :submit, t('tools.action_type.update_sandbox'), class: "btn btn-primary"
        = f.button :submit, t('tools.action_type.update_live'), class: "btn btn-success"

      = link_to "Cancel", tools_path, class: "btn btn-default"

      - unless current_user.stripe_access_token
        %br
        %br
        = link_to image_tag('stripe-blue.png'), stripe_connect_url


#loadingModal.modal.hide{"data-backdrop" => "static", "data-keyboard" => "false"}
  .modal-header
    %h1 Processing...
  .modal-body
    .progress.progress-striped.active
      .bar{style: "width: 100%;"}
